/*
 1. 什么是对象
    对象是现实生活中的1个具体存在.看得见，摸得着，拿过来就可以直接使用。
 
 2. 什么是类。
    类是对一群具有相同特征或者行为的事物的统称。抽象的。不能直接使用。
    如果非要使用类的话呢？只能去找到这1类事物中的1个具体存在，然后使用这个具体存在，
    
 3. 案例
    食物。
    水果
    苹果
 ------------------------
 1. 类和对象之间的关系
 
    类是模板.类的对象是根据这个模板创建出来的.
    类模板中有什么，对象中就有什么 绝不可能多 也绝不可能少。
 
    类是制造月饼的模子，模子不可以吃 所以类不能直接使用，
    对象是根据模子制造出来的月饼，模子上有什么 月饼上就有什么 不会多也不会少。月饼可以吃 所以对象可以使用
 
 2. 如何设计类
    类的作用：用来描述一群具有相同特征和行为的事物的
 
    设计类的三要素：
    -> 类的名字，你要描述的这类事物叫什么名字，
    -> 这类事物具有的相同的特征，这类事物拥有什么
    -> 这类事物具有的共同的行为.这类事物会做什么
 
 3. 如何找到类
    名词提炼法：分析整个业务流程，分析出现了那些名词，这些名词就是你要找到的类。
 
 
 */

#import <Foundation/Foundation.h>

/*
 1. 如何定义类
     1）.类的三要素，
     2）.定义类的语法
        a．位置，直接写在源文件之中 不要写在main函数之中，
        b. 类的定义分为两个部分
            -> 类的声明
            @interface 类名 : NSObject 
            {
                这类事物具有的共同的特征，将他们定义为变量。
            }
            功能就是1个方法，将方法的声明写在这里。
 
            @end
 
            -> 类的实现
            @implementation 类名
            将方法的实现写在这里。
            @end
 
    3). 几点注意：
        a. 类必须要有声明和实现
        b，类名用你描述的事物的名称来命名就可以了，类名的每1个单词的首字母必须要以大写开头.
        C． NSObject是神马意思 不用惯 照写就可以了。
        d. 用来表示着类事物的共同的特征的变量必须要定义在@interface的大括弧之中.
        e. 定义在大括弧之中用来表示着类事物的共同的特征的变量我们叫做.属性 成员变量 实例变量 字段……！
        f. 属性名一定要以_开头
        
        语法是固定的。
         @interface 类名 : NSObject
         {
             NSString *_name;
             int _age;
             float _height;
         }
         @end

         @implementation 类名



         @end
 
 2. 类的定义
    1). 类的作用
    2). 类的三要素
    3). 类的定义
 
 3. 类是无法直接使用的。如果非要使用这个类的话，就必须要先找到这个类中的1个具体存在，再使用这个对象
 
    类和对象的关系：类中有的东西 这个类的对象也有 不会多少也不会少.对象就可以使用。
 
    如何创建1个类的对象？
    
    语法：类名 *对象名 = [类名 new]
         Person *p1 = [Person new];
         根据Person这个类的模板，创建了1个对象名字叫做P1
         P1对象的待点：
         -＞ 可以直接使用。
         -> 类中定义的东西 这个对象中也有 不会多也不会少，
 
 4. 如何使用对象
 
    如何访问对象的属性：
    
    1），默认情况下，对象的属性是不允许被外界直接访问的，
        如果允许对象的属性可以被外界访问，那么就再声明属性的是加1个@public关键字•
 
    2）．访问对象的属性的方式
        对象名->属性名=值；
        对象名->属性名；
 
        （*对象名）.属性名；
        平时使用的时候，使用->
 
 */
@interface Person : NSObject
{
    @public
    NSString *_name;
    int _age;
    float _height;
}
@end

@implementation Person



@end

int main(int argc, const char * argv[]) {
    
    Person *p1 = [Person new];
    p1->_name = @"Jack";
    p1->_age = 19;
    p1->_height = 178.5f;
    
    NSLog(@"p1对象的_name属性是%@", p1->_name);
    
    
    return 0;
}
